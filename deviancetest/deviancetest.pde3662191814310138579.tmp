// uses images named "xx" where xx>=01, xx is odd for deviant images
// and xx+1 would be the 'normal' version of the image
import java.io.File;

File dir; 
// note: images[0] will be image 1, so EVEN indices mean DEVIANT images
String[] images; //an array of image names

int numTrials;
// int numBlocks;
int[] blockTime = {250}; //9999 for unlimited time
int timegrayscr = 1000; //time between two images

PFont f;
int oldTime;
boolean acceptRes; //whether or not to accept user response
boolean nextTrial; 
boolean instructions; //only set to true in the beginning
boolean setup; //setting up current trial?

// keeping track of useful info
boolean oNormal; //does the o key correspond with 'normal'?
int trial; //current trial, 0 - images.length - 1
int block;  //current block, 0 - blockTime.length - 1
int imgnum; //number of current image, as per image file name
int userResponse; //deviancy scale 1-7 of image, from less to more
int timeElapsed;  //time user takes to respond
int[] trialList; //random order of indices of imgs to be displayed in current block
int[] blockList; //random block order to be used

void setup() {
  size(1000, 700);
  frameRate(1000);

  dir = new File(dataPath("")); 
  images = dir.list(); //an array of image names
  numTrials = images.length;
  blockList = blockTime;
  trialList = randIndex(images.length);
  trial = 0;
  block = 0;
  acceptRes = false;
  instructions = true;
  nextTrial = true;
  
  setFont(28);
  background(122);
  text("In this experiment, you will see a collection of images.\n" +
          "For each image, press the option that corresponds most to your judgment:\n" +
          "1 (Not at all deviant) - 7 (Very Deviant).\n" +
          "You will have a different amount of time to view the images\n" +
          "in different blocks of the experiment\n" +
          "The trial will continue after you respond for every image\n" +
          "Press space to begin.", width/2, height/4);
}

void draw() {
  if (instructions == true); //wait until user presses space
  else if (trial == 0 || trial >= numTrials){ //Move to next block
    acceptRes = false;
    background(122);
    setFont(28);
    if (block >= blockList.length - 1){
      text("You have finished the experiment.\n" +
            "Please return to Qualtrics.", width/2, height/2);
    }
    else {
      text("The next block will be block " + (block + 1) + " out of " + 
            (blockList.length - 1) + ".\nPress space to continue.", width/2, height/2.5);
    }
  }
  else if (nextTrial == true) //the user responded; set up next trial
    grayScreen();
  else{
    background(255);
    setFont(28);
    text("How deviant is the content of this image?\n" +
         " (1) not at all deviant ----- (7) very deviant", width/2, height/2+200);
    if (millis() - oldTime <= blockTime[block]){
      imgnum = trialList[trial] + 1;
      img curImg = new img(images[trialList[trial]], imgnum);
      curImg.display();
    }
    acceptRes = true;
    if (setup){
      oldTime = millis();
      setup = false;
    }
  }
}

void keyPressed() {
  if (instructions == true && key == ' ')
    instructions = false;
  else if (trial >= numTrials){ 
    if (key == ' '){ //after user presses space, move on to next block
      block = block + 1;
      trialList = randIndex(images.length);
      nextTrial = true;
      trial = 0;
    }
  }
  else if (acceptRes == true){
    if (key == 'o' || key == 'p'){
      acceptRes = false;
      userResponse = key;
      background(122);
      nextTrial = true;
    }
  }
}

// for the gray screen between blocks
void grayScreen(){
  acceptRes = false;
  background(122);
  setFont(75);
  text("+", width/2, height/2);
  trial += 1;
  nextTrial = false;
  setup = true;
  delay(timegrayscr);
  oldTime = millis();
}

// takes number as input and outputs an array of random indices
// for an array of that size, with no index repeated
int[] randIndex(int size){
  int[] ret = new int[size];
  for (int i = 0; i < size; i++)
    ret[i] = i;
  for (int i = 0; i < size - 1; i++){
    int rand = int(random(size));
    int temp = ret[i];
    ret[i] = ret[rand];
    ret[rand] = temp;
  }
  for (int i = 0; i < size; i++)
    print(ret[i]+" ");
  print("\n");
  return ret;
}

// tells the program to wait for however long wait is
void delay(int wait){
  int time = millis();
  while (millis() - time <= wait);
}

void setFont(int size){
  f = createFont("Vernada", size);
  fill(0);
  textFont(f);
  textAlign(CENTER);
}

// object class for images
class img{
  int id;
  String imgName;
  boolean deviant; //if true, deviant version of image
  
  img(String name, int num){
    id = num; //the number found in the imageFile name
    imgName = name;
    deviant = true;
    if (num % 2 == 0)
      deviant = false;
  }
  
  void display(){
    PImage displayPic;
    displayPic = loadImage(imgName);
    int w = int(displayPic.width/2);
    int h = int(displayPic.height/2);
    displayPic.resize(w, h);
    image(displayPic, width/2-w/2, height/2-h/2);
  }
}